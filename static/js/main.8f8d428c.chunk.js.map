{"version":3,"sources":["logo.svg","components/Navigation.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","href","this","props","titulo","ntareas","Component","TodoForm","state","title","responsible","description","priority","handleInputChange","bind","handleSubmit","e","preventDefault","onAddTodo","setState","target","value","name","console","log","onSubmit","type","placeholder","onChange","App","todos","handleAddTodo","removeTodo","todo","index","window","confirm","filter","i","map","key","onClick","length","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f8d428c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\nclass Navigation extends Component {\r\n    render(){\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n              <a href=\"https://github.com\" className=\"text-white\">\r\n                    {this.props.titulo}\r\n                    <span className=\"badge badge-pill badge-light ml-2\">\r\n                       {this.props.ntareas}\r\n                    </span>\r\n               </a>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\nexport default Navigation;","import React,{Component} from 'react';\r\nclass TodoForm extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            title:'',\r\n            responsible:'',\r\n            description:'',\r\n            priority:'low'\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onAddTodo(this.state);\r\n        this.setState({\r\n          title: '',\r\n          responsible: '',\r\n          description: '',\r\n          priority: 'low'\r\n        });\r\n      }\r\n    \r\n      handleInputChange(e) {\r\n        const {value, name} = e.target;\r\n        console.log(value, name);\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n      }\r\n    render(){\r\n        return (\r\n            <div className=\"card\">\r\n                <h3>Task</h3>\r\n                <hr/>\r\n                <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"title\" className=\"form-control\" placeholder=\"Title\" onChange={this.handleInputChange}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"responsible\" className=\"form-control\" placeholder=\"Responsible\" onChange={this.handleInputChange}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"description\" className=\"form-control\" placeholder=\"Description\" onChange={this.handleInputChange}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                            <select name=\"priority\" className=\"form-control\" value={this.state.priority}  onChange={this.handleInputChange}>\r\n                                <option>low</option>\r\n                                <option>medium</option>\r\n                                <option>high</option>\r\n                            </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoForm;","import React ,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { todos } from './todos.json'\nimport Navigation from './components/Navigation';\nimport TodoForm from './components/TodoForm';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n     todos\n    };\n    this.handleAddTodo=this.handleAddTodo.bind(this)\n    this.removeTodo=this.removeTodo.bind(this)\n  }\n  handleAddTodo(todo){\n    this.setState({\n      todos:[...this.state.todos,todo]\n    }) \n  }\n  removeTodo(index){\n    if(window.confirm('Are you sure you want to delete it?')){\n      this.setState({\n      \n        todos:this.state.todos.filter((e,i)=>{\n          return i !== index\n        })  \n      })\n    }\n  }\n  render(){\n    const todos=this.state.todos.map((todo,i)=>{\n        return(\n          <div className=\"col-md-4\"  key={i}>\n            <div  className=\"card mt-1\">\n                 <div className=\"card-header text-center\">\n                     <h3>{todo.title}</h3>\n                     <span className=\"badge badge-pill badge-danger ml-2\">\n                        {todo.priority}\n                     </span>\n                  </div>\n                  <div className=\"card-body\">\n                      <p>{todo.description}</p>\n                      <p><mark>{todo.responsible}</mark></p>\n                  </div>\n                  <div className=\"card-footer\">\n                      <button className=\"btn btn-danger\" onClick={this.removeTodo.bind(this,i)}>Delete</button>\n                  </div>\n             </div>\n          </div>\n         \n        )\n    })\n    return (\n      <div className=\"App\">\n        <Navigation titulo=\"Tasks\" ntareas={this.state.todos.length}/>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div className=\"container\">\n            <div className=\"row mt-4\">\n                <div className=\"col-md-4 text-center\">\n                      <TodoForm onAddTodo={this.handleAddTodo}/>\n                </div>\n                <div className=\"col-md-8\">\n                    <div className=\"row\">\n                        {todos}\n                    </div>\n                </div>\n            </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}